/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Proyecto;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 *
 * @author isaac
 */
public class Babilonico extends JFrame {

    /**
     * Creates new form Metodobabilonico
     */
    public Babilonico() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        txtNumero = new JTextField();
        jLabel2 = new JLabel();
        TxtDecimales = new JTextField();
        jLabel3 = new JLabel();
        TxtError = new JTextField();
        btncalcular = new JButton();
        btnborrar = new JButton();
        btnsalir = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 600));
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(null);

        jLabel1.setText("Numero ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(80, 40, 100, 19);

        txtNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroActionPerformed(evt);
            }
        });
        getContentPane().add(txtNumero);
        txtNumero.setBounds(290, 40, 200, 25);

        jLabel2.setText("Numero de decimales");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(80, 90, 180, 19);
        getContentPane().add(TxtDecimales);
        TxtDecimales.setBounds(290, 90, 200, 25);

        jLabel3.setText("Numero de error");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(80, 150, 140, 19);
        getContentPane().add(TxtError);
        TxtError.setBounds(290, 150, 200, 25);

        btncalcular.setText("calcular");
        btncalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcularActionPerformed(evt);
            }
        });
        getContentPane().add(btncalcular);
        btncalcular.setBounds(10, 530, 82, 25);

        btnborrar.setText("borrar");
        btnborrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnborrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnborrar);
        btnborrar.setBounds(140, 530, 72, 25);

        btnsalir.setText("salir");
        btnsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnsalir);
        btnsalir.setBounds(500, 540, 85, 25);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroActionPerformed

    private void btnsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsalirActionPerformed
        // TODO add your handling code here:
        int opcion = JOptionPane.showConfirmDialog(rootPane, "Desea salir del programa", "Ventana de salida", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opcion == JOptionPane.YES_OPTION) System.exit(0);
    }//GEN-LAST:event_btnsalirActionPerformed

    private void btncalcularActionPerformed(java.awt.event.ActionEvent evt) {
        boolean exit = true;
        //hacer validaciones en todos los campos de texto, que sean numeros, que sean mayores a 0 y que no esten vacios. Aparte el error debe ser menor a 1 y el numero de decimales debe ser mayor a 0
        if (txtNumero.getText().isEmpty() || TxtDecimales.getText().isEmpty() || TxtError.getText().isEmpty() || !esNumerico(txtNumero.getText()) || !esNumerico(TxtDecimales.getText()) || !esNumerico(TxtError.getText()) || Double.parseDouble(txtNumero.getText()) < 0 || Double.parseDouble(TxtDecimales.getText()) <= 0 || Double.parseDouble(TxtError.getText()) >= 1 || !esEntero(TxtDecimales.getText())) {
            // Resto del código...
                    //volver de color rojo el marco de los campos de texto que no cumplan con las condiciones
            if (txtNumero.getText().isEmpty() || !esNumerico(txtNumero.getText()) || !esMayorCero(txtNumero.getText())) txtNumero.setBorder(BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            if (TxtDecimales.getText().isEmpty() || !esNumerico(TxtDecimales.getText()) || !esMayorCero(TxtDecimales.getText()) || Double.parseDouble(TxtDecimales.getText()) <= 0 || !esEntero(TxtDecimales.getText())) TxtDecimales.setBorder(BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            if (TxtError.getText().isEmpty() || !esNumerico(TxtError.getText()) || !esMayorCero(TxtError.getText()) || Double.parseDouble(TxtError.getText()) >= 1) TxtError.setBorder(BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

            //mostrar mensaje de error
            JOptionPane.showMessageDialog(rootPane, "corriga los campos en rojo", "Error", JOptionPane.ERROR_MESSAGE);

            //si algun campo ya cumple las condiciones, se le quita el borde rojo
            if (!txtNumero.getText().isEmpty() && esNumerico(txtNumero.getText()) && esMayorCero(txtNumero.getText())) txtNumero.setBorder(BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if (!TxtDecimales.getText().isEmpty() && esNumerico(TxtDecimales.getText()) && esMayorCero(TxtDecimales.getText()) && Double.parseDouble(TxtDecimales.getText()) > 0 &&  esEntero(TxtDecimales.getText())) TxtDecimales.setBorder(BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if (!TxtError.getText().isEmpty() && esNumerico(TxtError.getText()) && esMayorCero(TxtError.getText()) && Double.parseDouble(TxtError.getText()) < 1) TxtError.setBorder(BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));



            return;

        }


        // Parsear los campos de texto
        double numero = Double.parseDouble(txtNumero.getText());
        int decimales = Integer.parseInt(TxtDecimales.getText());
        double error = Double.parseDouble(TxtError.getText());

        if (error < 0.00001) {
            error = 0.00001;
        }


        //se crean las variables para el metodo de babilonico
        int raiz = 0;
        double erroraproximado;
        int iteraciones = 1;

        //se crea una tabla para mostrar los resultados
        DefaultTableModel model = (DefaultTableModel) new DefaultTableModel();
        model.addColumn("Iteracion");
        model.addColumn("raiz");
        model.addColumn("error relativo");

        //se calcula la raiz mediante el metodo de babilonico pero si el valor es menor a 1, se empieza desde 1
        if (numero < 1) raiz = 1;
        else {
            raiz = (int) Math.sqrt(numero);
            }
        //creamos una variable que se llame base que sera el valor de la raiz
        double base = raiz;


//se crea un ciclo que se repita hasta que el error sea menor o igual al error que se ingreso
        while (exit){
            //calculamos la altura divimos el numero entre la base
            double altura = numero / base;
            //redondeamos la altura al numero de decimales que se ingreso
            altura = redondearDecimales(altura, decimales);
            //calculamos el area multiplicando la altura por la raiz
            double area = altura * base;
            //redondeamos el area al numero de decimales que se ingreso
            area = redondearDecimales(area, decimales);
            //calculamos el error relativo
            double errorrelativo = (altura-base) / altura*100;
            //redondeamos el error relativo al numero de decimales que se ingreso
            errorrelativo = redondearDecimales(errorrelativo, decimales);
            //volver el error relativo positivo
            errorrelativo = Math.abs(errorrelativo);

            //se agregan los datos a la tabla
            model.addRow(new Object[]{iteraciones, altura, errorrelativo});

            // Redondear el error relativo y el error ingresado al mismo número de decimales antes de la comparación
            double roundedErrorRelativo = redondearDecimales(errorrelativo, decimales);
            double roundedError = redondearDecimales(error, decimales);

            //si el error relativo es menor o igual al error que se ingreso se detiene el ciclo
            if (roundedErrorRelativo <= roundedError) exit = false;
                //si no se sigue con el ciclo
            else {
                //se calcula la nueva base
                base = (base + altura) / 2;
                //el numero de decimales se redondea al numero de decimales que se ingreso
                base = redondeo(base, decimales);
            }
            //se aumenta el contador de iteraciones
            iteraciones++;
        }
        //se muestra la tabla
        JOptionPane.showMessageDialog(null, new JScrollPane(new JTable(model)), "Resultados", JOptionPane.INFORMATION_MESSAGE);








    }

    //metodo para validar que un numero no sea decimal
    public static boolean esEntero(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch(NumberFormatException e){
            return false;
        }
    }

    //metodo para redondear decimales
    public static double redondeo(double numero, int decimales) {
        return Math.round(numero * Math.pow(10, decimales)) / Math.pow(10, decimales);
    }


    //metodo para tomar el numero de decimales que ingreso el usuario
    public static double redondearDecimales(double valorInicial, int numeroDecimales) {
        BigDecimal bd = new BigDecimal(valorInicial);
        bd = bd.setScale(numeroDecimales, RoundingMode.DOWN);
        return bd.doubleValue();
    }
    // Método para verificar si una cadena es numérica
    public static boolean esNumerico(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch(NumberFormatException e){
            return false;
        }
    }
    //metodo para verificar si es mayor a 0
    public static boolean esMayorCero(String str) {
        try {
            double num = Double.parseDouble(str);
            return num > 0;
        } catch(NumberFormatException e){
            return false;
        }
    }

    private void btnborrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnborrarActionPerformed
        // TODO add your handling code here:
        //borrar los campos de texto
        txtNumero.setText("");
        TxtDecimales.setText("");
        TxtError.setText("");

        //quitar el borde rojo de los campos de texto
        txtNumero.setBorder(BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TxtDecimales.setBorder(BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TxtError.setBorder(BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));


    }//GEN-LAST:event_btnborrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Babilonico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Babilonico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Babilonico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Babilonico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Babilonico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField TxtDecimales;
    private JTextField TxtError;
    private JButton btnborrar;
    private JButton btncalcular;
    private JButton btnsalir;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JTextField txtNumero;
    // End of variables declaration//GEN-END:variables
}
